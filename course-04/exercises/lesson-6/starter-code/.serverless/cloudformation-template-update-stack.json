{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "RS256AuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-RS256Auth"
      }
    },
    "AuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-Auth"
      }
    },
    "GetGroupsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-GetGroups"
      }
    },
    "CreateGroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-CreateGroup"
      }
    },
    "GetImagesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-GetImages"
      }
    },
    "CreateImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-CreateImage"
      }
    },
    "SendUploadNotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-SendUploadNotifications"
      }
    },
    "ResizeImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-ResizeImage"
      }
    },
    "ConnectHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-ConnectHandler"
      }
    },
    "DisconnectHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-DisconnectHandler"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-udagram-app-dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-udagram-app-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-udagram-app-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codedeploy:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Groups-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Images-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Images-dev/index/ImageIdIndex"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::jose-serverless-udagram-images-dev/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::jose-serverless-udagram-thumbnail-dev/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Connections-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": {
                    "Ref": "Auth0Secret"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "KMSKey",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-udagram-app-dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "RS256AuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-RS256Auth",
        "Handler": "src/lambda/auth/rs256Auth0Authorizer.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "RS256AuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RS256AuthLambdaVersionRfbfQEr5Tyl9weJVlqVzaSDhQXRTfskSaDfPujkHX4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RS256AuthLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "AuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-Auth",
        "Handler": "src/lambda/auth/auth0Authorizer.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "AuthLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "AuthLambdaVersionXDWTSLnXXAZdeKivuETpcB8dp9nLA9gargpk8sIvopU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "GetGroupsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-GetGroups",
        "Handler": "src/lambda/http/getGroups.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "GetGroupsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetGroupsLambdaVersionT5cvFjMsirRrf5H8zNmfqdebuQ3YJriMW3dIE9E2A4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetGroupsLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "CreateGroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-CreateGroup",
        "Handler": "src/lambda/http/createGroup.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "CreateGroupLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateGroupLambdaVersionAvZmguWWYx9T40Zuuf9KULBVFjBGd90UbSPlycN8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateGroupLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "GetImagesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-GetImages",
        "Handler": "src/lambda/http/getImages.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "GetImagesIamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "GetImagesIamRoleLambdaExecution",
        "GetImagesLogGroup"
      ]
    },
    "GetImagesLambdaVersion5LXbNPjeMFISEwSnQ6OZfx51VlI4vwOHTfViz9g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetImagesLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "CreateImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-CreateImage",
        "Handler": "src/lambda/http/createImage.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "CreateImageLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateImageLambdaVersiony45xBuFxkmQ1oW0YxYmCEtws8y9yzvpB2JJql1Bkc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateImageLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "SendUploadNotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-SendUploadNotifications",
        "Handler": "src/lambda/s3/sendNotifications.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret",
            "STAGE": "dev",
            "API_ID": {
              "Ref": "WebsocketsApi"
            }
          }
        }
      },
      "DependsOn": [
        "SendUploadNotificationsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SendUploadNotificationsLambdaVersionheqj0JVrWlpASRzSAnaFthJb8On1r3aLfwSqRfuRkQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendUploadNotificationsLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "ResizeImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-ResizeImage",
        "Handler": "src/lambda/s3/resizeImage.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "ResizeImageLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ResizeImageLambdaVersionkdwAoimL0S7mjfh9InRMyFPZy6WPPGxSd3J80eVid8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ResizeImageLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "ConnectHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-ConnectHandler",
        "Handler": "src/lambda/websocket/connect.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "ConnectHandlerLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ConnectHandlerLambdaVersion9YiKO2PJD9rUGpcgLtjIgRm5K1hJCGg0RYbrwkTBn0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConnectHandlerLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "DisconnectHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-udagram-app/dev/1587252353905-2020-04-18T23:25:53.905Z/serverless-udagram-app.zip"
        },
        "FunctionName": "serverless-udagram-app-dev-DisconnectHandler",
        "Handler": "src/lambda/websocket/disconnect.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Images-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "CONNECTIONS_TABLE": "Connections-dev",
            "IMAGES_S3_BUCKET": "jose-serverless-udagram-images-dev",
            "SIGNED_URL_EXPIRATION": 300,
            "THUMBNAILS_S3_BUCKET": "jose-serverless-udagram-thumbnail-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        }
      },
      "DependsOn": [
        "DisconnectHandlerLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DisconnectHandlerLambdaVersionDETb3zM3Kq6drh9S5EoGGTONP4uYrJ1SNM8jnGUXVYQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DisconnectHandlerLambdaFunction"
        },
        "CodeSha256": "r7qvY0LcCRZmgNMpw4BECs9JPrHznA6rZGRKm3S+zMk="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-serverless-udagram-app",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceGroups": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "groups",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroupsGroupidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "PathPart": "{groupId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroupsGroupidVarImages": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVar"
        },
        "PathPart": "images",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGroupsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGroupsGroupidVarImagesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGroupsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetGroupsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGroupsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RS256AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Ref": "CreateGroupLambdaFunctionAliasLive"
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "RequestBodyValidator"
        },
        "RequestModels": {
          "application/json": "GroupRequest"
        }
      },
      "DependsOn": [
        "GroupRequestModel"
      ]
    },
    "ApiGatewayMethodGroupsGroupidVarImagesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetImagesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGroupsGroupidVarImagesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "RS256AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "RequestBodyValidator"
        },
        "RequestModels": {
          "application/json": "ImageRequest"
        }
      },
      "DependsOn": [
        "ImageRequestModel"
      ]
    },
    "RS256AuthApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "RS256Auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "RS256AuthLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1587252309107": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodGroupsOptions",
        "ApiGatewayMethodGroupsGroupidVarImagesOptions",
        "ApiGatewayMethodGroupsGet",
        "ApiGatewayMethodGroupsPost",
        "ApiGatewayMethodGroupsGroupidVarImagesGet",
        "ApiGatewayMethodGroupsGroupidVarImagesPost"
      ]
    },
    "GetGroupsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetGroupsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateGroupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateGroupLambdaFunctionAliasLive"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RS256AuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RS256AuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetImagesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetImagesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-serverless-udagram-app-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "ConnectHandlerWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ConnectHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DisconnectHandlerWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DisconnectHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "ConnectHandlerLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "ConnectHandlerLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DisconnectHandlerLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DisconnectHandlerLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DisconnectHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ConnectHandlerWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DisconnectHandlerWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymentutn4r2pJOfNWZgwol2aplLy9qFpLytIHzwAR2V39msk"
        }
      }
    },
    "WebsocketsDeploymentutn4r2pJOfNWZgwol2aplLy9qFpLytIHzwAR2V39msk": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "SendUploadNotificationsSnsSubscriptionImagesTopicdev": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        },
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "SendUploadNotificationsLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "SendUploadNotificationsLambdaPermissionImagesTopicdevSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendUploadNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        }
      }
    },
    "ResizeImageSnsSubscriptionImagesTopicdev": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        },
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "ResizeImageLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "ResizeImageLambdaPermissionImagesTopicdevSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ResizeImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        }
      }
    },
    "GroupRequestModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Name": "GroupRequest",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "group",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "description"
          ],
          "additionalProperties": false
        }
      }
    },
    "ImageRequestModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Name": "ImageRequest",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "image",
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            }
          },
          "required": [
            "title"
          ],
          "additionalProperties": false
        }
      }
    },
    "ServerlessudagramappdevDeploymentApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ComputePlatform": "Lambda"
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda",
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "CreateGroupLambdaFunctionDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "ServerlessudagramappdevDeploymentApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE",
            "DEPLOYMENT_STOP_ON_ALARM",
            "DEPLOYMENT_STOP_ON_REQUEST"
          ]
        },
        "DeploymentConfigName": {
          "Fn::Sub": [
            "CodeDeployDefault.Lambda${ConfigName}",
            {
              "ConfigName": "Linear10PercentEvery1Minute"
            }
          ]
        },
        "DeploymentStyle": {
          "DeploymentType": "BLUE_GREEN",
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "CreateGroupLambdaFunctionAliasLive": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "FunctionVersion": {
          "Fn::GetAtt": [
            "CreateGroupLambdaVersionAvZmguWWYx9T40Zuuf9KULBVFjBGd90UbSPlycN8",
            "Version"
          ]
        },
        "FunctionName": {
          "Ref": "CreateGroupLambdaFunction"
        },
        "Name": "Live"
      },
      "UpdatePolicy": {
        "CodeDeployLambdaAliasUpdate": {
          "ApplicationName": {
            "Ref": "ServerlessudagramappdevDeploymentApplication"
          },
          "DeploymentGroupName": {
            "Ref": "CreateGroupLambdaFunctionDeploymentGroup"
          }
        }
      }
    },
    "GetImagesIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-udagram-app-dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-udagram-app-dev-GetImages:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Images-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Groups-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-udagram-app-dev",
              {
                "Ref": "AWS::Region"
              },
              "GetImages",
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "GatewayResponseDefault4XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "GroupsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "Groups-dev"
      }
    },
    "ImagesDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "groupId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "S"
          },
          {
            "AttributeName": "imageId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "groupId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timestamp",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        },
        "TableName": "Images-dev",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "ImageIdIndex",
            "KeySchema": [
              {
                "AttributeName": "imageId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "WebSocketConnectionsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "Connections-dev"
      }
    },
    "RequestBodyValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "Name": "request-body-validator",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": false
      }
    },
    "AttachmentsBucket": {
      "Type": "AWS::S3::Bucket",
      "DependsOn": "SNSTopicPolicy",
      "Properties": {
        "BucketName": "jose-serverless-udagram-images-dev",
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Event": "s3:ObjectCreated:Put",
              "Topic": {
                "Ref": "ImagesTopic"
              }
            }
          ]
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::jose-serverless-udagram-images-dev/*"
            }
          ]
        },
        "Bucket": {
          "Ref": "AttachmentsBucket"
        }
      }
    },
    "SNSTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "ImagesTopic"
              },
              "Condition": {
                "ArnLike": {
                  "AWS:SourceArn": "arn:aws:s3:::jose-serverless-udagram-images-dev"
                }
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "ImagesTopic"
          }
        ]
      }
    },
    "ThumbnailsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "jose-serverless-udagram-thumbnail-dev"
      }
    },
    "ImagesTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Image bucket topic",
        "TopicName": "imagesTopic-dev"
      }
    },
    "KMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "KMS key to encrypt Auth0 secret",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Allow administration of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:iam:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "root"
                    ]
                  ]
                }
              },
              "Action": [
                "kms:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "KMSKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/auth0Key-dev",
        "TargetKeyId": {
          "Ref": "KMSKey"
        }
      }
    },
    "Auth0Secret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "Auth0Secret-dev",
        "Description": "Auth0 secret",
        "KmsKeyId": {
          "Ref": "KMSKey"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "RS256AuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RS256AuthLambdaVersionRfbfQEr5Tyl9weJVlqVzaSDhQXRTfskSaDfPujkHX4"
      }
    },
    "AuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthLambdaVersionXDWTSLnXXAZdeKivuETpcB8dp9nLA9gargpk8sIvopU"
      }
    },
    "GetGroupsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetGroupsLambdaVersionT5cvFjMsirRrf5H8zNmfqdebuQ3YJriMW3dIE9E2A4"
      }
    },
    "CreateGroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateGroupLambdaVersionAvZmguWWYx9T40Zuuf9KULBVFjBGd90UbSPlycN8"
      }
    },
    "GetImagesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetImagesLambdaVersion5LXbNPjeMFISEwSnQ6OZfx51VlI4vwOHTfViz9g"
      }
    },
    "CreateImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateImageLambdaVersiony45xBuFxkmQ1oW0YxYmCEtws8y9yzvpB2JJql1Bkc"
      }
    },
    "SendUploadNotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendUploadNotificationsLambdaVersionheqj0JVrWlpASRzSAnaFthJb8On1r3aLfwSqRfuRkQ"
      }
    },
    "ResizeImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ResizeImageLambdaVersionkdwAoimL0S7mjfh9InRMyFPZy6WPPGxSd3J80eVid8"
      }
    },
    "ConnectHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConnectHandlerLambdaVersion9YiKO2PJD9rUGpcgLtjIgRm5K1hJCGg0RYbrwkTBn0"
      }
    },
    "DisconnectHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DisconnectHandlerLambdaVersionDETb3zM3Kq6drh9S5EoGGTONP4uYrJ1SNM8jnGUXVYQ"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    },
    "AwsDocApiId": {
      "Description": "API ID",
      "Value": {
        "Ref": "ApiGatewayRestApi"
      }
    }
  }
}